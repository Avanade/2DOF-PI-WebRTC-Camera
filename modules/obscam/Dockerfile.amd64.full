FROM python:3.11-slim-bookworm
 
RUN apt-get update && apt-get install -y gnupg apt-transport-https ca-certificates wget \
    && wget -q https://www.deb-multimedia.org/pool/main/d/deb-multimedia-keyring/deb-multimedia-keyring_2016.8.1_all.deb \
    && dpkg -i deb-multimedia-keyring_2016.8.1_all.deb \
    && echo "deb https://www.deb-multimedia.org bookworm main non-free" | tee -a /etc/apt/sources.list \ 
    && apt-get update -oAcquire::AllowInsecureRepositories=true \
    && apt-get install -y --allow-unauthenticated deb-multimedia-keyring \
    && rm -rf /var/lib/apt/lists/* \
    && apt-get -y autoremove

RUN apt-get update && apt-get upgrade -y && apt-get install -y \
    build-essential cmake libtool libc6 libc6-dev unzip wget libnuma1 libnuma-dev apt-transport-https ca-certificates \
    && apt-get remove python-gi-dev -y && apt-get install -y \ 
    python3-gi python3-pyqt5 ccache curl bison flex libasound2-dev libbz2-dev libcap-dev libdrm-dev libegl1-mesa-dev libfaad-dev libgl1-mesa-dev libgles2-mesa-dev libgmp-dev libgsl0-dev \
    libjpeg-dev libmms-dev libmpg123-dev libogg-dev liborc-0.4-dev libpango1.0-dev libpng-dev librtmp-dev libgif-dev pkg-config libmp3lame-dev libopencore-amrnb-dev libopencore-amrwb-dev \
    libsidplay1-dev libx264-dev libusb-1.0 pulseaudio libpulse-dev libomxil-bellagio-dev libfreetype6-dev checkinstall fonts-freefont-ttf libcamera-dev libatk1.0-dev libatk-bridge2.0 libgdk-pixbuf2.0-dev libffi8 libffi-dev libselinux-dev libmount-dev \
    libelf-dev libdbus-1-dev autotools-dev automake autoconf autopoint libxml2-dev zlib1g-dev libglib2.0-dev gtk-doc-tools libgudev-1.0-dev libxt-dev libvorbis-dev libcdparanoia-dev \
    libtheora-dev libvisual-0.4-dev iso-codes libgtk-3-dev libraw1394-dev libiec61883-dev libavc1394-dev libv4l-dev libcairo2-dev libcaca-dev libspeex-dev libshout3-dev libaa1-dev libflac-dev libdv4-dev \
    libtag1-dev libwavpack-dev libsoup2.4-dev libcdaudio-dev libdc1394-dev ladspa-sdk libass-dev libdca-dev libdvdnav-dev libexempi-dev libexif-dev libgme-dev libgsm1-dev \
    libiptcdata0-dev libkate-dev libmodplug-dev libmpcdec-dev libofa0-dev libopus-dev librsvg2-dev libsndfile1-dev libsoundtouch-dev libspandsp-dev libx11-dev libxvidcore-dev libzbar-dev libzvbi-dev liba52-0.7.4-dev \
    libcdio-dev libdvdread-dev libmad0-dev libmpeg2-4-dev libtwolame-dev yasm python3-dev libgirepository1.0-dev tar weston libssl-dev policykit-1-gnome libwebrtc-audio-processing-dev libvpx-dev \
    doxygen graphviz imagemagick libavcodec-dev libavdevice-dev libavfilter-dev libavformat-dev libavutil-dev libmp3lame-dev libopencore-amrwb-dev libsdl2-dev libsdl2-image-dev \
    libsdl2-mixer-dev libsdl2-net-dev libsdl2-ttf-dev libsnappy-dev libsoxr-dev libssh-dev libtool libv4l-dev libva-dev libvdpau-dev libvo-amrwbenc-dev libvorbis-dev libwebp-dev libx265-dev libxcb-shape0-dev \
    libxcb-shm0-dev libxcb-xfixes0-dev libxcb1-dev libxml2-dev lzma-dev texinfo libaom-dev libsrt-gnutls-dev zlib1g-dev libgmp-dev libzimg-dev git tclsh sudo wayland-protocols libxkbcommon-dev libepoxy-dev nasm \
    && rm -rf /var/lib/apt/lists/* \
    && apt-get -y autoremove

RUN pip3 install scikit-build ninja websockets python-rtmidi pycairo jinja2 ply pyyaml
RUN apt-get update && apt-get install -y  && rm -rf /var/lib/apt/lists/* && apt-get -y autoremove
RUN apt-get update && apt-get install -y libcurl4-openssl-dev && rm -rf /var/lib/apt/lists/* && apt-get -y autoremove

## MESON - specific version
RUN cd /usr/local/src \
    && git clone https://github.com/mesonbuild/meson.git \
    && cd meson \
    && git checkout 0.64.1 \ 
        ## everything after this is version 1.x?
    && git fetch --all \
    && python3 setup.py install \
    && cd /usr/local/src && rm -rf meson

## AAC - optional (needed for rtmp only really)
RUN cd /usr/local/src \
    && mkdir ffmpeg-libraries \
    && cd ffmpeg-libraries \
    && git clone --depth 1 https://github.com/mstorsjo/fdk-aac.git \
    && cd fdk-aac \
    && autoreconf -fiv \
    && ./configure \
    && make -j4 \
    && make install \
    && ldconfig \
    && cd /usr/local/src && rm -rf ffmpeg-libraries

## AV1 - optional
RUN cd /usr/local/src \
    && git clone --depth 1 https://code.videolan.org/videolan/dav1d.git \
    && cd dav1d \
    && mkdir build \
    && cd build \
    && meson .. \
    && /usr/local/bin/ninja && /usr/local/bin/ninja install \
    && ldconfig \
    && libtoolize \
    && cd /usr/local/src && rm -rf dav1d

## HEVC - optional
RUN cd /usr/local/src \
    && git clone --depth 1 https://github.com/ultravideo/kvazaar.git \
    && cd kvazaar \
    && ./autogen.sh \
    && ./configure \
    && make -j4 && make install \
    && cd /usr/local/src && rm -rf kvazaar

## Userland SCTP Stack
RUN cd /usr/local/src \
    && git clone --depth 1 https://github.com/sctplab/usrsctp \
    && cd usrsctp \
    && mkdir build \
    && meson build  --prefix=/usr/local \
    && /usr/local/bin/ninja -C build install -j4 \
    && libtoolize \
    && ldconfig \
    && cd /usr/local/src && rm -rf usrsctp

## SRT - optional
RUN cd /usr/local/src \
    && git clone --depth 1 https://github.com/Haivision/srt \
    && cd srt \
    && ./configure \
    && make \
    && make install \
    && ldconfig \
    && cd /usr/local/src && rm -rf srt

## Intel's Libva (an implementation for VA-API (Video Acceleration API))
RUN cd /usr/local/src \
    && git clone --depth 1 https://github.com/intel/libva.git \
    && cd libva \
    && cd build \
    && meson .. -Dprefix=/usr \
    && ninja \
    && ninja install \
    && cd /usr/local/src && rm -rf libva

## FFMpeg
RUN cd /usr/local/src \
    && git clone --depth 1 https://github.com/FFmpeg/FFmpeg.git \
    && cd FFmpeg \ 
    && ./configure --extra-cflags="-I/usr/local/include" --extra-ldflags="-L/usr/local/lib"  --extra-libs="-lpthread -lm -latomic" \
	--enable-libaom --enable-libsrt --enable-librtmp --enable-libopus --enable-gmp --enable-version3 --enable-libdrm --enable-shared --enable-pic --enable-libvpx --enable-libvorbis --enable-libfdk-aac --enable-libvpx	--target-os=linux \
	--enable-gpl --enable-pthreads --enable-libkvazaar --enable-hardcoded-tables --enable-libopencore-amrwb --enable-libopencore-amrnb --enable-nonfree --enable-libmp3lame --enable-libfreetype --enable-libx264 --enable-libx265 --enable-libwebp \
	--enable-mmal --enable-indev=alsa --enable-outdev=alsa --enable-libsnappy --enable-libxml2 --enable-libssh --enable-libsoxr --disable-vdpau --enable-libdav1d --enable-libass --disable-mmal --enable-openssl \
    && libtoolize \
    && make -j4 \
    && libtoolize \
    && make install -j4 \
    && ldconfig \
    && cd /usr/local/src && rm -rf FFmpeg

## GLIB 
RUN cd /usr/local/src \
    && export GST_PLUGIN_PATH=/usr/local/lib/gstreamer-1.0:/usr/lib/gstreamer-1.0 \
    && export LD_LIBRARY_PATH=/usr/local/lib/ \
    && wget https://download.gnome.org/sources/glib/2.78/glib-2.78.0.tar.xz -O glib.tar.xz \
    && tar -xvf glib.tar.xz && rm glib.tar.xz \
    && cd glib-2.78.0 \
    && mkdir build \
    && cd build \
    && meson --prefix=/usr/local -Dman=false .. \
    && ninja \
    && ninja install \
    && ldconfig \
    && libtoolize \
    && cd /usr/local/src && rm -rf glib-2.78.0

## GObject 
RUN cd /usr/local/src \
    && export GST_PLUGIN_PATH=/usr/local/lib/gstreamer-1.0:/usr/lib/gstreamer-1.0 \
    && export LD_LIBRARY_PATH=/usr/local/lib/ \
    && wget https://download.gnome.org/sources/gobject-introspection/1.78/gobject-introspection-1.78.1.tar.xz -O gobject.tar.xz \
    && tar -xvf gobject.tar.xz && rm gobject.tar.xz \
    && cd gobject-introspection-1.78.1 \
    && mkdir build \
    && cd build \
    && meson --prefix=/usr/local --buildtype=release  .. \
    && ninja \
    && ninja install \
    && ldconfig \
    && libtoolize \
    && cd /usr/local/src && rm -rf gobject-introspection-1.78.1

## LibNice
RUN cd /usr/local/src \
    && export GST_PLUGIN_PATH=/usr/local/lib/gstreamer-1.0:/usr/lib/gstreamer-1.0 \
    && export LD_LIBRARY_PATH=/usr/local/lib/ \
    && git clone --depth 1 https://github.com/libnice/libnice.git \
    && cd libnice \
    && mkdir build \
    && cd build \
    && meson --prefix=/usr/local --buildtype=release .. \
    && ninja \
    && ninja install \
    && ldconfig \
    && libtoolize \
    && cd /usr/local/src && rm -rf libnice

## SRTP 
RUN cd /usr/local/src \
    && export GST_PLUGIN_PATH=/usr/local/lib/gstreamer-1.0:/usr/lib/gstreamer-1.0 \
    && export LD_LIBRARY_PATH=/usr/local/lib/ \
    && git clone --depth 1 https://github.com/cisco/libsrtp \
    && cd libsrtp \
    && ./configure --enable-openssl --prefix=/usr/local \
    && make -j4 \
    && make shared_library \
    && make install -j4 \
    && ldconfig \
    && libtoolize \
    && cd /usr/local/src && rm -rf libsrtp

## Build gStreamer 1.22
RUN cd /usr/local/src \
    && git clone -b 1.22 --depth 1 https://gitlab.freedesktop.org/gstreamer/gstreamer/ \
        ## operating on version 1.22
    && export GST_PLUGIN_PATH=/usr/local/lib/gstreamer-1.0:/usr/lib/gstreamer-1.0 \
    && export LD_LIBRARY_PATH=/usr/local/lib/ \
    && cd gstreamer \
    && rm -r build || true \
    && mkdir build \
    && cd build \
    && meson --prefix=/usr/local -Dbuildtype=release -Dgst-plugins-base:gl_winsys=egl -Dgpl=enabled -Ddoc=disabled -Dtests=disabled -Dexamples=disabled -Dges=disabled -Dgst-examples=disabled -Ddevtools=disabled .. \
    && cd .. \
    && ninja -C build install -j4 \
    && ldconfig \
    && cd /usr/local/src && rm -rf gstreamer

## Vanilla LibCamera -- We run it after gstreamer so it detects it and installs the right plugins.
RUN cd /usr/local/src \
    && export GST_PLUGIN_PATH=/usr/local/lib/gstreamer-1.0:/usr/lib/gstreamer-1.0 \
    && export LD_LIBRARY_PATH=/usr/local/lib/ \
    && git clone --depth 1 https://git.libcamera.org/libcamera/libcamera.git \
    && cd libcamera \
    && meson setup build \
    && ninja -C build install -j4 \ 
    && ldconfig \
    && cd /usr/local/src && rm -rf libcamera

COPY requirements.txt ./
RUN python3 -m pip install -r requirements.txt 

ADD app /app
WORKDIR /app

ENV PYTHONUNBUFFERED=1
CMD ["python3","app.py"]

# build takes about 75 minutes. The resulting image is 1.98GB
# docker buildx build --platform linux/arm/v7 --pull --rm -f "Dockerfile.amd64.full" -t innovationcontainerimages.azurecr.io/obs-cam:streamer-amd64 "."
# docker build  --pull --rm -f "Dockerfile.amd64.full" -t innovationcontainerimages.azurecr.io/obs-cam:streamer-amd64 "."
# docker run -dit --network host --name obs-cam innovationcontainerimages.azurecr.io/obs-cam:streamer-amd64 