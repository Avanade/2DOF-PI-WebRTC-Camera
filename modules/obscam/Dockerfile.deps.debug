FROM innovationcontainerimages.azurecr.io/obs-cam:streamer-pi.base

## MESON - specific version
RUN cd /usr/local/src \
    && git clone https://github.com/mesonbuild/meson.git \
    && cd meson \
    && git checkout 0.64.1 \ 
        ## everything after this is version 1.x?
    && git fetch --all \
    && python3 setup.py install

## AAC - optional (needed for rtmp only really)
RUN cd /usr/local/src \
    && mkdir ffmpeg-libraries \
    && cd ffmpeg-libraries \
    && git clone --depth 1 https://github.com/mstorsjo/fdk-aac.git \
    && cd fdk-aac \
    && autoreconf -fiv \
    && ./configure \
    && make -j4 \
    && make install \
    && ldconfig

## AV1 - optional
RUN cd /usr/local/src \
    && git clone --depth 1 https://code.videolan.org/videolan/dav1d.git \
    && cd dav1d \
    && mkdir build \
    && cd build \
    && meson .. \
    && /usr/local/bin/ninja && /usr/local/bin/ninja install \
    && ldconfig \
    && libtoolize

## HEVC - optional
RUN cd /usr/local/src \
    && git clone --depth 1 https://github.com/ultravideo/kvazaar.git \
    && cd kvazaar \
    && ./autogen.sh \
    && ./configure \
    && make -j4 && make install

## Userland SCTP Stack
RUN cd /usr/local/src \
    && git clone --depth 1 https://github.com/sctplab/usrsctp \
    && cd usrsctp \
    && mkdir build \
    && meson build  --prefix=/usr/local \
    && /usr/local/bin/ninja -C build install -j4 \
    && libtoolize \
    && ldconfig 

## SRT - optional
RUN cd /usr/local/src \
    && git clone https://github.com/Haivision/srt \
    && cd srt \
    && ./configure \
    && make \
    && make install \
    && ldconfig

## Intel's Libva (an implementation for VA-API (Video Acceleration API))
RUN cd /usr/local/src \
    && git clone https://github.com/intel/libva.git \
    && cd libva \
    && cd build \
    && meson .. -Dprefix=/usr \
    && ninja \
    && ninja install 

## RPI userland camera support
RUN cd /usr/local/src \
    && git clone --depth 1 https://github.com/raspberrypi/userland.git \
    && cd userland \ 
    && ./buildme \ 
    && echo "/opt/vc/lib" > /etc/ld.so.conf.d/00-vmcs.conf \
    && ldconfig 

## FFMpeg
RUN cd /usr/local/src \
    && git clone --depth 1 https://github.com/FFmpeg/FFmpeg.git \
    && cd FFmpeg \ 
    && ./configure --extra-cflags="-I/usr/local/include" --arch=armhf --extra-ldflags="-L/usr/local/lib"  --extra-libs="-lpthread -lm -latomic" \
	--enable-libaom --enable-libsrt --enable-librtmp --enable-libopus --enable-gmp --enable-version3 --enable-libdrm --enable-shared --enable-pic --enable-libvpx --enable-libvorbis --enable-libfdk-aac --enable-libvpx	--target-os=linux \
	--enable-gpl --enable-pthreads --enable-libkvazaar --enable-hardcoded-tables --enable-libopencore-amrwb --enable-libopencore-amrnb --enable-nonfree --enable-libmp3lame --enable-libfreetype --enable-libx264 --enable-libx265 --enable-libwebp \
	--enable-mmal --enable-indev=alsa --enable-outdev=alsa --enable-libsnappy --enable-libxml2 --enable-libssh --enable-libsoxr --disable-vdpau --enable-libdav1d --enable-libass --disable-mmal --arch=armel --enable-openssl \
    && libtoolize \
    && make -j4 \
    && libtoolize \
    && make install -j4 \
    && ldconfig

## GLIB 
RUN cd /usr/local/src \
    && export GST_PLUGIN_PATH=/usr/local/lib/gstreamer-1.0:/usr/lib/gstreamer-1.0 \
    && export LD_LIBRARY_PATH=/usr/local/lib/ \
    && wget https://download.gnome.org/sources/glib/2.78/glib-2.78.0.tar.xz -O glib.tar.xz \
    && tar -xvf glib.tar.xz && rm glib.tar.xz \
    && cd glib-2.78.0 \
    && mkdir build \
    && cd build \
    && meson --prefix=/usr/local -Dman=false .. \
    && ninja \
    && ninja install \
    && ldconfig \
    && libtoolize 

## GObject 
RUN cd /usr/local/src \
    && export GST_PLUGIN_PATH=/usr/local/lib/gstreamer-1.0:/usr/lib/gstreamer-1.0 \
    && export LD_LIBRARY_PATH=/usr/local/lib/ \
    && wget https://download.gnome.org/sources/gobject-introspection/1.78/gobject-introspection-1.78.1.tar.xz -O gobject.tar.xz \
    && tar -xvf gobject.tar.xz && rm gobject.tar.xz \
    && cd gobject-introspection-1.78.1 \
    && mkdir build \
    && cd build \
    && meson --prefix=/usr/local --buildtype=release  .. \
    && ninja \
    && ninja install \
    && ldconfig \
    && libtoolize

## LibNice
RUN cd /usr/local/src \
    && export GST_PLUGIN_PATH=/usr/local/lib/gstreamer-1.0:/usr/lib/gstreamer-1.0 \
    && export LD_LIBRARY_PATH=/usr/local/lib/ \
    && git clone --depth 1 https://github.com/libnice/libnice.git \
    && cd libnice \
    && mkdir build \
    && cd build \
    && meson --prefix=/usr/local --buildtype=release .. \
    && ninja \
    && ninja install \
    && ldconfig \
    && libtoolize

## SRTP 
RUN cd /usr/local/src \
    && export GST_PLUGIN_PATH=/usr/local/lib/gstreamer-1.0:/usr/lib/gstreamer-1.0 \
    && export LD_LIBRARY_PATH=/usr/local/lib/ \
    && git clone https://github.com/cisco/libsrtp \
    && cd libsrtp \
    && ./configure --enable-openssl --prefix=/usr/local \
    && make -j4 \
    && make shared_library \
    && make install -j4 \
    && ldconfig \
    && libtoolize

# build takes about 45 minutes. The resulting image is about 2.9GB
# docker buildx build --platform linux/arm/v7 --rm -f "Dockerfile.deps" -t innovationcontainerimages.azurecr.io/obs-cam:streamer-pi.deps "."
# docker build  --rm -f "Dockerfile.deps" -t innovationcontainerimages.azurecr.io/obs-cam:streamer-pi.deps "."
# docker run -dit --network host --name obs-cam.deps innovationcontainerimages.azurecr.io/obs-cam:streamer-pi.deps /bin/bash
